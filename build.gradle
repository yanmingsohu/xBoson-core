/**
 * 有以下 gradle 任务可执行:
 * 1. `war` (默认): 混淆打包 servlet 应用, 输出在 build/lib
 * 2. `app`: 混淆打包 java 独立应用, 输出在 bin
 *
 * 参考:
 * https://www.guardsquare.com/en/products/proguard/manual/gradle
 * https://docs.gradle.org/current/dsl
 */
apply plugin: 'war'
defaultTasks 'war'


buildscript {
    repositories {
        flatDir dirs: [ 
            "${System.env.PROGUARD6}/lib",
            "${System.env.JAVA_HOME}/../proguard6.0.1/lib",
            "${System.env.JAVA_HOME}/jre/lib" ]
    }
    dependencies {
        classpath ':proguard'
    }
    dependencies {
        classpath files("./WebRoot/WEB-INF/classes")
    }
}


sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        compileClasspath = fileTree('WebRoot/WEB-INF/lib/') + fileTree('libs/')
    }
}


tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}


def newMani() {
    manifest {
        attributes 'Created-By': 'J.ym'
        attributes 'Specification-Title': 'xBoson PAAS'
        attributes 'Specification-Vendor': '上海竹呗信息技术有限公司'
        attributes 'Specification-Version': com.xboson.util.Version.xBoson
    }
}


task copyResource(type: Copy) {
    from 'src'
    // 复制到编译后的目录, 混淆器会识别资源文件.
    into 'build/classes/java/main'

    include '**/*.js'
    include '**/*.sql'
    include '**/*.lua'
    include '**/*.properties'
    include '**/*.prop'
    include '**/*.json'
    includeEmptyDirs = false
}


task mergeGuard1(type: Copy) {
    from 'build/guard-out/classes/classes/'
    into 'build/guard-out'
    includeEmptyDirs = false
}


task mergeGuard2(type: Delete) {
    delete 'build/guard-out/classes'
}


war {
    webInf {
        from('WebRoot/WEB-INF')
        exclude 'classes'
    }
    archiveName = 'xboson.war'
    classpath = 'build/guard-out'
    manifest = newMani()
}


task proguard(type: proguard.gradle.ProGuardTask) {
    injars  'build/classes/java/main'
    outjars 'build/guard-out/'

    libraryjars "${System.getProperty('java.home')}/lib/"
    libraryjars "${System.getProperty('java.home')}/jre/lib/"
    libraryjars './WebRoot/WEB-INF/lib/'
    libraryjars './libs/'

    // 包中的资源文件目录跟随混淆后的目录
    adaptresourcefilenames
    dontusemixedcaseclassnames
    printmapping 'build/obfuscate-mapping.txt'
    printseeds 'build/seed.txt'
    obfuscationdictionary 'obfuscate-keywords.txt'
    classobfuscationdictionary 'class-keywords.txt'

    // 优化次数: 5:12s | 10:18s | 20:26s | 99:93s
    optimizationpasses 99

    // Database
    keep 'public class com.xboson.db.driver.* { public *; }'
    keep 'public class com.xboson.db.ConnectConfig { public *; }'

    // Script
    keep 'public class com.xboson.script.JSObject { public *; }'
    keepclassmembers 'public class com.xboson.script.lib.* { public *; }'
    keepclassmembers 'public class com.xboson.app.lib.* { public *; }'
    keep 'interface com.xboson.script.IVisitByScript' // 必须保留
    keepclassmembers 'class * implements com.xboson.script.IVisitByScript { public *; }'

    // File system
    keep 'public class com.xboson.fs.* { public *; }'
    keep 'public class com.xboson.fs.redis.FindContentInRedisWithLua'
    keep 'public class com.xboson.fs.ui.UIFileFactory'
    keep 'interface com.xboson.fs.basic.* { public *; }'

    // UI / Service
    keep 'public class com.xboson.j2ee.ui.MimeTypeFactory'
    keepclassmembers 'public class com.xboson.j2ee.ui.HelperModule { public *; }'
    keepclassmembers 'class * extends com.xboson.j2ee.container.XService \
        { public *; }'
    keepclassmembers 'public class com.xboson.service.* { public *; }'

    // init
    keep 'public class com.xboson.init.install.step.* { public *; }'
    keep 'public class com.xboson.init.Startup'
    keep 'public class com.xboson.init.Independent { public *; }'

    // Test / log / Sleep
    keep 'class * implements com.xboson.sleep.ISleepwalker { public *; }'
    keep 'class com.xboson.log.writer.* { public *; }'
    keep 'public class com.xboson.test.* { public *; }'

    // RPC
    keep 'class com.xboson.rpc.* { public *; *; }'
    keep 'interface com.xboson.rpc.* { public *; *; }'
    keep 'class * implements java.rmi.Remote { *; public *; }'

    // Been
    keep 'public class com.xboson.been.XBosonException { public *; }'
    keep 'public class com.xboson.been.Config { public *; }'
    keep 'public class com.xboson.been.LoginUser { public *; }'
    keep 'public class com.xboson.been.MongoConfig { public *; }'
    keep 'public class com.xboson.been.SessionData { public *; }'
    keep 'public class com.xboson.been.AppToken { public *; }'
    keepclassmembers 'public class com.xboson.been.License { public *; }'

// 已经优化了类的文件加载器路径, 在测试完成后删除下面注释的规则定义
//    keeppackagenames 'com.xboson.util.config'
//    keeppackagenames 'com.xboson.test.js'
//    keeppackagenames 'com.xboson.app.lib'
//    keeppackagenames 'com.xboson.script.lib'
//    keeppackagenames 'com.xboson.db.sql'

    keepattributes '*Annotation*'
    renamesourcefileattribute 'SourceFile'
    keepattributes 'SourceFile, LineNumberTable, Exceptions, Signature'
    keep 'public class * implements java.io.Serializable { public *; *; }'
    keepclassmembers 'class * implements java.io.Serializable'
    keepclassmembers 'enum * { public *; }'
}


task remove_proguard_out(type: Delete) {
    delete 'build/guard-out'
}


/**
 * 把多个 jar 依赖打包到一起.
 * @deprecated 打包后, 无法加载 class, 无法加载服务.
 */
task dependenciesJar(type: Jar) {
    def lib1 = fileTree('./libs').matching { include "*.jar" }
    def lib2 = fileTree('./WebRoot/WEB-INF/lib/').matching { include "*.jar" }

    // lib1.collect { println '  Depends: '+ it }
    // lib2.collect { println '  Depends: '+ it }

    from { lib2.collect { zipTree(it) } }
    from { lib1.collect { zipTree(it) } }
    destinationDir = file('./bin')
    archiveName = 'xboson-dependencies-all.jar'
}


task dependenciesFile(type: Copy) {
    from './libs'
    from './WebRoot/WEB-INF/lib/'
    into './bin/lib'
    include '*.jar'
    includeEmptyDirs = false
}


task copyWebInf(type: Copy) {
    from './WebRoot/WEB-INF'
    into './build/guard-out/WEB-INF'
    exclude 'classes', 'lib'
    includeEmptyDirs = false
}


task app(type: Jar) {
    from ('build/guard-out')
    destinationDir = file('./bin')
    archiveName = 'xboson.jar'

    def classpath = '. ' + archiveName
    fileTree('./bin/lib').matching { include "*.jar" }.collect {
        classpath = classpath +' lib/'+ it.name
    }
    // println 'classpath: '+ classpath

    manifest = newMani()
    manifest {
        attributes 'Main-Class': 'com.xboson.init.Independent'
        attributes 'Class-Path': classpath
    }
}


task refuse() {
    if (project.gradle.startParameter.taskNames[0] == 'jar') {
        throw new Exception("Not support this task, use 'gradle app'")
    }
}


war.dependsOn proguard
war.dependsOn mergeGuard2
mergeGuard2.dependsOn mergeGuard1
mergeGuard1.dependsOn proguard
proguard.dependsOn remove_proguard_out
proguard.dependsOn compileJava
proguard.dependsOn copyResource
copyResource.dependsOn compileJava


app.dependsOn proguard
app.dependsOn mergeGuard2
app.dependsOn dependenciesFile
app.dependsOn copyWebInf
copyWebInf.dependsOn proguard


jar.dependsOn refuse