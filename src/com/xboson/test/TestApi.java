////////////////////////////////////////////////////////////////////////////////
//
// Copyright 2017 本文件属于 xBoson 项目, 该项目由 J.yanming 维护,
// 本文件和项目的全部权利由 [荆彦铭] 和 [王圣波] 个人所有, 如有对本文件或项目的任何修改,
// 必须通知权利人; 该项目非开源项目, 任何将本文件和项目未经权利人同意而发行给第三方
// 的行为都属于侵权行为, 权利人有权对侵权的个人和企业进行索赔; 未经其他合同约束而
// 由本项目(程序)引起的计算机软件/硬件问题, 本项目权利人不负任何责任, 切不对此做任何承诺.
//
// 文件创建日期: 17-11-22 下午2:18
// 原始文件路径: D:/javaee-project/xBoson/src/com/xboson/test/TestApi.java
// 授权说明版本: 1.1
//
// [ J.yanming - Q.412475540 ]
//
////////////////////////////////////////////////////////////////////////////////

package com.xboson.test;

import com.xboson.app.*;
import com.xboson.util.Password;
import com.xboson.util.Tool;


public class TestApi extends Test {

  public void test() {
    test_pool();
    test_api_encrypt();
  }


  public void test_pool() {
    sub("Test app pool");

    AppPool ap = new AppPool();
    XjOrg org = ap.getWithCreate("a297dfacd7a84eab9656675f61750078");
    XjApp app = org.getWithCreate("cfb82858dc0a4598834d356c661a678f");// 日志分析
    XjModule mod = app.getWithCreate("log_access");
    XjApi api = mod.getWithCreate("query");
  }


  public static void main(String[] a) {
    new TestApi();
  }


  public void test_api_encrypt() {
    sub("Encrypt api");
    String mi = "E1EBEAFC7ED623E63BC2113E5ECD8E09D046819AFE7608E8ADC8EDE9" +
            "EFD1B392526BE685422E1512340D7DA609524DA78A8EEA421EEB889CBFA8" +
            "3917931FD6F138031D95F728260A03C3A3592953A645FAF01F0B264F80B5" +
            "A1F58C0291A8F8A4CD7ADA137ED91875E78499AF73930FF23CD4E9593B66" +
            "4FC94E795E28C06FC5F709330B2C257FB2A7E8433D4FC8DE9B4BD56AE0F3" +
            "D03F895B763F97BEB38B8716215F5E14A686B208AC76E358AD8EA94F5990" +
            "32B3EA69F996D50CEFD86E48036025D19C953FA3EFB7593BFCB3B86FE05E" +
            "1F798C126A1DB93C20BA88CFA0A188C89BCD136EB323E14FB4DADCAF1D31" +
            "8B6E32F6E5C628C3108000FEEE84177AB9D0079305C8A015BC23CD2F0B0C" +
            "C8925633D44B5C0AB8B9A43982CB03E3B030A85A089B96AC0FA7F159E26A" +
            "FC31E29C067E433DBC5C9034428036ED2059FC4FDFF4E06FC57C644B5393" +
            "50717FC8C0E5F4D62835AD3E8646B4712B98B745BF8D8B03AB6729EA679B" +
            "BA114AE6A5424E85DDACD15030606FDA8C64E89AF9001AEF587211B1A8C8" +
            "E06264DFFCE36218E04737264B4E9971991BA889C31BA1B1057904AC2698" +
            "ED8904BEB8C7F229B029FDA555633851DD627880EA0BD3A8EDCEEF419400" +
            "D884BEB220EE4D9693D7DE31EC6FFC68D7EB20A8D4C8B9A8FFF850BAE9F9" +
            "FB7A3B6E7BE7A9036BF93EF6E2FA974D2F11B9F41855525BBDBA32175938" +
            "3F3AFDEBF90647AF52125828F077FD2702C3467C53FB14105A593650C2F3" +
            "4041AC49F7D7439752EF12789A5794CE01571731772742BEC39708F5D2A5" +
            "D3D4A563412B8EA2940B15F01275F0A53EAEC21177FE834066EB462B0677" +
            "84A70863D2A4073DF89CF27AFFD0A10612BA99004145592304868270D81F" +
            "14BF05C2C6189412C757FBEC10E620C0C464D67EF5F195F4C924816F9016" +
            "2D99CFD0A69DDAF67CB1A19E2F4D509439692117571B2853F576AEAD770F" +
            "675567CD3CF42950F079E7A6017562FCF7401C7AEFCBFD36256D9912E0D8" +
            "E052D91DBBB3AAFE8422A13ABC8314D3462503D7095DD3FB44BF277E7A5F" +
            "B115AF0B91EE90EE03946BDA25F990143189BAF6ED9A3C41D23EE683674E" +
            "BFD9D7E2941B3DB4CB056F8C1EDDC6614393CE5F1D10242458FEA3BC1FAC" +
            "668203BAA7870AA039980A15A00A15E8FBD285A9CDCD97097A6EC16A1DD7" +
            "FB8AA68F5141C12633402D7C0026EDFC066B6C94B2E4F0FFFA013DB7394F" +
            "DF21736918EC7D7644B700E6C88ABCD7C760D868378A203C2B3E32D43F21" +
            "27AF8E7B36D74406E45B7C2511E61D575545742FE18166928A2023AC1D7E" +
            "7835D36980DC77905C6B698C2BF2D7E33DB7394FDF21736918EC7D7644B7" +
            "00E67E0D7696B2E41A88014E90E413B9BB59798963F4DB652B201DF54945" +
            "C9AD860D751071814D44DB93EF5A06A884F54F40976FC186FC2FB69970CB" +
            "5C39919554AC2960D97EB4EB2A15147A82AB5DC6AC565C2F6E5A1DF36A5E" +
            "F66FAB85CFE38DCDC6E6778BADA5A00B4F627D5823C9529415C984D506F0" +
            "1EACBAA598D4F6DFCECB7B153C5416A78DA4D356F19281C6934737453213" +
            "6506EE8F1790559689B54C4E9136E3DF3D06BBF79C7D59FD29BDACF3B340" +
            "717A3087AC302FA89189A02320FE1C792F4DE814AFE5C20DA17697F69009" +
            "AF1E145DFFE66E174ADECCA902A45F2FB173B37268A37C77E96B67B4FBB1" +
            "0413DCBFA943DBBD132E101325CA147A7F001592CEDEF71030C13FE887C6" +
            "FFC337E1D81DDC61AA740D92D1BECA2D1C6B48537B9E610574B9CA1FB04D" +
            "3118E39C298A194B3911AA33D149FBF66D04E99F24A51C29BB6F4E2E0FB8" +
            "19F56FB022909D1AFBF7C935E83D9F1FD2A82201C0C4FB9D5DDFCDCCE24A" +
            "8BBADDB1DADD1038499E7600E5645CC165C4D6E2EB284B4165BDC3330440" +
            "50FB3D1FFEBA16A4647B499F63D68A3683DAFC737EA95357910BF96709D7" +
            "234E3CA10EDD78C38DEA45E0E3BE98794FB28D69872C0E17DCAC010E54DB" +
            "098F43019683B1F0E62C3CFB1DA3899F0609062DB70BFB947D15CD9B5DE7" +
            "0000661582473C785D9AC6700D86E7BEA9FC35AB7AE9C4DE8ACDC45C97F8" +
            "7265612F7F6572698F7A619773CD33A61184F18C8CFCA26276E34A9701D9" +
            "411DE7FC03B05E594FAC46AEB33FBE41B576C47FBA7B74E23FCC4A1D44EF" +
            "5782202C504949373F8EA392C2E9E3144BEC14E0AEDBB8D887B3138C63BE" +
            "806DEF420AD0BD50D94F028C87927384D4292E0ACB816F43A5C15E695819" +
            "58D6F6A3680A6F5EB33DB0055EC3BA107C3D02FFB8EFD965274ACD07B3EF" +
            "59930C69DAE2EE1945F4CC0627CC";


    beginTime();

    Thread[] tt = new Thread[10000];
    for (int i=0; i<tt.length; ++i) {
      Thread t = new Thread(new Runnable() {
        @Override
        public void run() {
          String code = Password.decryptApi(mi);
          String mi2 = Password.encryptApi(code);
          eq(mi, mi2, "api decrypt/encrypt");
        }
      });
      t.start();
      tt[i] = t;
    }
    for (int i=0; i<tt.length; ++i) {
      Tool.waitOver(tt[i]);
    }

    endTime("Thread out", tt.length, "count");

    String code = Password.decryptApi(mi);
    msg(code);
  }
}
